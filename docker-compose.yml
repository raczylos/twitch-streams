services:
  postgres:
    build:
      context: ./esatto/database
      dockerfile: Dockerfile
    container_name: esatto_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "20000:5432"
    volumes:
      - esatto_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./esatto
      dockerfile: Dockerfile
    container_name: esatto_backend
    ports:
      - "8080:8080"
      - "5005:5005"
    volumes:
      - ./esatto:/app
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: mvn spring-boot:run -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: esatto_frontend
    ports:
      - "4200:4200"
    environment:
      NODE_ENV: ${NODE_ENV}
      CHOKIDAR_USEPOLLING: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  esatto_postgres_data:

networks:
  app-network: